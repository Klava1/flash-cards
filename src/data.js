export const data =     [ {
    id : 1,question : "What are the advantages of using React?",answer : "Use of Virtual DOM improves efficiency: React uses virtual DOM to render the view. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves. React has a gentle learning curve when compared to frameworks like Angular. Anyone with little knowledge of javascript can start building web applications using React. React allows developers to develop engaging user interfaces that can be easily navigated in various search engines. It also allows server-side rendering, which boosts the SEO of an app. React uses component-based architecture for developing applications. Components are independent and reusable bits of code. These components can be shared across various applications having similar functionality. React provides you with the freedom to choose the tools, libraries, and architecture for developing an application based on your requirement."}
    , {
    id : 2,question : "What are the limitations of React?",answer : "The few limitations of React are as given below: React is not a full-blown framework as it is only a library. The components of React are numerous and will take time to fully grasp the benefits of all. It might be difficult for beginner programmers to understand React. Coding might become complex as it will make use of inline templating and JSX."}
    , {
    id : 3,question : "Why was virtual DOM introduced?",answer : "DOM manipulation is an integral part of any web application, but DOM manipulation is quite slow when compared to other operations in JavaScript. The efficiency of the application gets affected when several DOM manipulations are being done. Most JavaScript frameworks update the entire DOM even when a small part of the DOM changes. To address the problem of inefficient updating, the react team introduced the concept of virtual DOM."}
    , {
    id : 4,question : "What are props in React?",answer : "The props in React are the inputs to a component of React. They can be single-valued or objects having a set of values that will be passed to components of React during creation by using a naming convention that almost looks similar to HTML-tag attributes. We can say that props are the data passed from a parent component into a child component. The main purpose of props is to provide different component functionalities such as: Passing custom data to the React component. Using through this.props.reactProp inside render() method of the component. Triggering state changes."}
    , {
    id : 5,question : "What is a full-stack developer?",answer : "Web developers who perform both parts of the work — backend and frontend — are called full-stack developers."}
    , {
    id : 6,question : "What is a Terminal?",answer : "A terminal, also known as 'console,' 'command line’, is used to manage a computer and the files on it, system processes, and to configure programs. Some operating system features can only be enabled using a terminal."}
    , {
    id : 7,question : "Define React?",answer : "React is a JavaScript library for building user interfaces. Note that it is specifically a library, not a framework."}
    , {
    id : 8,question : "What is a library?",answer : "A library is a collection of pre-written code used to simplify tasks. The term 'library' simply refers to a set of code that is reused multiple times. Essentially, it's a collection of predefined functions and classes that programmers can use to simplify their work and speed up the development process. Thus, developers do not need to write code to perform certain functions since the library already includes code for these functions. Standard libraries are available for most programming languages, but programmers can also create their own custom libraries."}
    , {
    id : 9,question : "Why do we need libraries?",answer : "To reuse code that has already been written by someone else. Developers can avoid writing code for functionality that has already been written in the library, using it instead. This increases efficiency and reduces the time spent on development. Because it is more likely that other people will also use this code, you benefit from them being able to find and fix any bugs if necessary. This is one of the reasons why libraries are useful."}
    , {
    id : 10,question : "What is a Framework?",answer : "A framework is a ready-made model in IT, a template for a software platform, on the basis of which you can write your own code."}
    , {
    id : 11,question : "What is Babel?",answer : "Babel is a JavaScript transpiler that is very popular among developers because it instantly transforms code written in ES6, or later standards, into code that is supported by all browsers, typically producing ES5. This allows developers to write code using the latest JS features without worrying about compatibility errors."}
    , {
    id : 12,question : "What is JSX?",answer : "JSX is an extension of the JavaScript language used in React, which allows us to very simply describe the user interface. Visually it is similar to HTML, but it is not HTML"}
    , {
    id : 13,question : "What is className?",answer : "To specify a CSS class, use the className attribute. This applies to all common DOM and SVG elements such as <div>, <a>, etc."}
    , {
    id : 14,question : "What is a Component?",answer : "Components are parts of a website's page, for example, the header, sidebar, content area. All these elements are programmed separately to simplify the project development. But within these parts, different areas can be made into separate components: within the website's header, there is an area with the logo, and inside the footer, there is an area with links to social networks. Thus, a component within a component."}
    , {
    id : 15,question : "What types of components do you know?",answer : "In React, there are two types of components: functional components and class components. Functional components are simple JavaScript functions that return React elements, while class components are ES6 classes that extend React's Component class and can manage internal state and lifecycle methods."}
    , {
    id : 16,question : "What are functional components?",answer : "Functional components are JavaScript functions that accept props as arguments and return React elements that describe what should appear on the screen. They are typically used for simpler components that do not require state or lifecycle methods, although with hooks, they can now manage state and effects."}
    , {
    id : 17,question : "What are class components?",answer : "Class components are more traditional in React. They are ES6 classes that extend from React.Component and include render methods that return React elements. Class components are used when more complex features like state management and lifecycle methods are needed."}
    , {
    id : 18,question : "Advantages and disadvantages of class and functional components?",answer : "Functional components are simpler, easier to understand and test, and often lead to cleaner code. They lack their own lifecycle methods but can use hooks for managing state and effects. Class components are more powerful, allowing for more complex functions including lifecycle methods and state management. However, they can be bulkier and more complex to set up."}
    , {
    id : 19,question : "Which components are better to use: class or functional?",answer : "Both types of components are useful, but the choice depends on the use case. Functional components, especially with hooks, offer a more modern and simpler approach and are generally recommended unless class-specific features are required."}
    , {
    id : 20,question : "What is the state of a component?",answer : "State is a JavaScript object in a React component that determines how that component behaves. In class components, state is typically initialized in the constructor and modified using setState. In functional components, state is handled through the useState hook."}
    , {
    id : 21,question : "What is the difference between props and state?",answer : "Props and state are both plain JavaScript objects that hold information that influences the output of render, but they serve different purposes. Props are passed to components by their parent and are immutable by the component that receives them. State is managed within the component and can be asynchronous and updated using setState in class components or useState in functional components."}
    , {
    id : 22,question : "What does setState() do?",answer : "setState() schedules updates to the component's state object. When the state changes, the component responds by re-rendering."}
    , {
    id : 23,question : "What is Webpack?",answer : "Webpack is a tool that allows you to compile, for example, JavaScript modules into a single JS file. Webpack is also known as a module bundler."}
    , {
    id : 24,question : "What is Rendering?",answer : "Rendering is the process by which React queries your components, requiring an up-to-date description of the user interface section they are responsible for, based on the current combination of props and state. The result of rendering components is usually represented as JSX code."}
    , {
    id : 25,question : "What is the purpose of the render() method?",answer : "The render() method is used in the React library to display a component on the page. It returns a React element that describes how the component should look on the page, using JSX syntax—a JavaScript syntax extension that allows writing HTML-like code inside JavaScript. When React runs the render() method, it compares the obtained element with the previous state and updates only those parts of the page that have changed. This allows for high performance and quick display of changes on the page."}
    , {
    id : 26,question : "What is super()?",answer : "super() is a built-in JavaScript function. In the constructor, the keyword super() is used as a function that calls the parent constructor."}
    , {
    id : 27,question : "What are controlled components?",answer : "In a controlled component, form data is handled by the state within the component. The state within the component acts as the 'single source of truth' for the input elements displayed by the component."}
    , {
    id : 28,question : "What are uncontrolled components?",answer : "Uncontrolled components act more like traditional HTML form elements. The data for each input element is stored in the DOM, not within the component. Instead of writing an event handler for all your state updates, you use a ref to get values from the DOM."}
    , {
    id : 29,question : "What is the difference between a controlled and an uncontrolled component?",answer : "In controlled components, data from form fields is processed by the React component. The alternative is uncontrolled components, where data is processed by the DOM."}
    , {
    id : 30,question : "What does the onChange attribute do?",answer : "The onChange attribute allows you to set a function that will be called every time the user changes the value of a form (such as a text field). This function will receive the new form value as a parameter, and you can use it to update the state of your application. Thus, you can respond to changes in user input and make appropriate changes in your application."}
    , {
    id : 31,question : "What does the onSubmit attribute do?",answer : "The onSubmit attribute allows you to set a function that will be called when the form is submitted. When the user presses the form submission button, React calls this function, which can perform additional actions, such as sending data to a server or updating the state of the application. The onSubmit function can also prevent the form from being submitted to the server if the data is entered incorrectly, and show an error message to the user."}
    , {
    id : 32,question : "Why are keys necessary?",answer : "Keys help React identify which items have been changed, added, or removed. They need to be specified so that React can match elements in the array over time."}
    , {
    id : 33,question : "What is input?",answer : "The HTML <input> element is used to create interactive controls in web forms to receive data from the user."}
    , {
    id : 34,question : "What is ref?",answer : "ref is an attribute of a component, the value of which should be an object created in the constructor through the React.createRef() function. This object, unlike other data in props or state, is stored as a regular property of the object."}
    , {
    id : 35,question : "What is a ternary operator?",answer : "The conditional (ternary) operator is the only operator in JavaScript that takes three operands: a condition followed by a question mark (?), then an expression that executes if the condition is true, followed by a colon (:), and finally, an expression that executes if the condition is false. It is often used as a shorthand for the if statement."}
    , {
    id : 36,question : "What is an API?",answer : "API (Application Programming Interface) is a set of instructions and standards that define how various software components should interact with each other. It is an interface that allows programmers to use the functionality of already written programs to create new applications. APIs provide developers access to functions and data that can be used in their own applications or services. They can include various types of data such as text, images, audio, video, and more. Examples of APIs include social network APIs like Facebook and Twitter, which allow developers to create applications that utilize the data and functionality of these social networks. APIs are also used by websites and applications to provide access to their functionality for other developers and applications."}
    , {
    id : 37,question : "What is a REST API?",answer : "REST API (Representational State Transfer Application Programming Interface) is a standard for creating web services that uses the HTTP protocol to transmit data between the client and server. It provides an interface for interacting with web resources using common HTTP methods such as GET, POST, PUT, and DELETE. REST APIs use resources (users, photos, articles, etc.) and operations (retrieving, creating, updating, and deleting resources) to define what actions can be performed with the web service. The core principles of REST API: Each resource should have a unique identifier (URI). Using standard HTTP methods to perform operations with resources. REST APIs should be stateless. Responses to requests should be in a format that can easily be processed by the client, such as JSON or XML. REST API is used to create web services, mobile applications, web applications, and other applications that need to exchange data with a server."}
    , {
    id : 38,question : "Difference between API and REST API?",answer : "API and REST API are two different concepts that can sometimes be used interchangeably. The main difference between a general API and a REST API is that a REST API is a more specific set of rules and constraints for interacting with a web service, while an API can use any protocols and data formats. REST API has several additional principles that must be followed to adhere to REST standards. These principles include using unique resource identifiers, standard request methods, no server state, and caching capability. In general, a REST API is a more specialized and standardized way of creating web services, typically used for creating APIs for mobile and web applications."}
    , {
    id : 39,question : "How to make AJAX requests in React or how to work with API in React?",answer : "For this, libraries such as jQuery AJAX, Axios, or the built-in Fetch API can be used. Data should be requested in the componentDidMount method. To update the component (after receiving data), setState() is used."}
    , {
    id : 40,question : "What is fetch()?",answer : "The fetch() function is a method of the window object in JavaScript and a part of the Fetch API. This method is built into the core of modern JS, so users do not need to install any additional code. Fetch() allows us to obtain data from APIs asynchronously without installing additional libraries."}
    , {
    id : 41,question : "What is Axios?",answer : "Axios is a JavaScript library for making HTTP requests from Node.js, XMLHttpRequest, or the browser. As a modern library based on the Promise API, Axios has some advantages such as protection against Cross-Site Request Forgery (CSRF) attacks. To be able to use the Axios library, users must install it and import it into their project using CDN, npm, Yarn, or Bower."}
    , {
    id : 42,question : "What are hooks in React?",answer : "Hooks are a new feature introduced in React v16.8. Hooks allow you to use all the capabilities of React without writing class components. For example, before version 16.8, managing a component's state required a class component. Now, we can maintain state in a functional component using the useState hook."}
    , {
    id : 43,question : "What are the advantages of hooks?",answer : "Component State: Hooks allow functional components to have their own state without the need to create a class. Code Reusability: Hooks enable the extraction of common logic from components, which simplifies code reuse and testing. Effects and Side-effects: Hooks allow for adding and managing side-effects in components, such as server requests or DOM updates."}
    , {
    id : 44,question : "Why use hooks in React?",answer : "Using hooks reduces the number of concepts needed when developing React applications, eliminating the constant need to switch between functions, classes, or elements to perform similar tasks; hooks offer uniformity in the ecosystem. Secondly, the React lifecycle has been significantly simplified through the use of hooks, as previously seen lifecycle methods of class components—componentDidMount, componentDidUpdate, and componentWillUnmount—are summarized in one hook, useEffect, which acts as all three."}
    , {
    id : 45,question : "What are the differences in using hooks and class components in terms of state management?",answer : "When using setState() in class components, the state variable is always an object. In contrast, the state variable in hooks can be of any type, such as a number, string, boolean, object, or array. When the state variable is an object, setState() in class components automatically merges the new value with the state object. But in the case of the state update function in useState(), we need to explicitly merge the updated property of the object using the spread operator."}
    , {
    id : 46,question : "List the types of hooks in React?",answer : "There are more than 15 hooks in React, ranging from basic ones like useState, useEffect, and useContext, to additional hooks such as useCallback, useReducer, useMemo, useRef, and so on."}
    , {
    id : 47,question : "What is useState()?",answer : "useState is a hook. We call it to equip our functional component with internal state. React will preserve this state between renders. Calling useState returns an array with two elements, which contains: the current state value and a function to update it. This function can be used anywhere, such as in an event handler."}
    , {
    id : 48,question : "What does the substring() method do?",answer : "The substring() method extracts characters from a string between two specified indices and returns a new substring."}
    , {
    id : 49,question : "What does the filter() method do?",answer : "The array .filter() method allows you to create a new array by filtering elements using a provided callback function. The callback function is called for each element of the array and based on the function's result, decides whether to include that element in the new array or not."}
    ]